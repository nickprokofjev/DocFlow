#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ OCR/NLP.
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å Gateway Timeout.
"""
import asyncio
import sys
import os
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º backend –≤ –ø—É—Ç—å
backend_path = Path(__file__).parent / "backend"
sys.path.insert(0, str(backend_path))

# –¢–∏–ø—ã –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ (—Å–æ–±—Ä–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    # –ò–º–ø–æ—Ä—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–æ–≤ - –Ω–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –≤ runtime
    import sys
    sys.path.append(str(Path(__file__).parent / "backend"))
    from task_queue import TaskQueue, JobStatus  # type: ignore
    import ocr_nlp  # type: ignore
else:
    # Runtime –∏–º–ø–æ—Ä—Ç—ã - –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—É—Ç–∏
    TaskQueue = None
    JobStatus = None
    ocr_nlp = None

async def test_async_processing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–¥–∞—á."""
    print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ OCR/NLP...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—É—Ç–∏
        import sys
        if str(backend_path) not in sys.path:
            sys.path.insert(0, str(backend_path))
        
        from task_queue import TaskQueue, JobStatus  # type: ignore
        
        # –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á
        queue = TaskQueue()
        print("‚úÖ TaskQueue —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É
        async def test_task(job_id: str, duration: int = 5):
            """–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."""
            print(f"üìù –ó–∞–¥–∞—á–∞ {job_id} –Ω–∞—á–∞—Ç–∞")
            
            for i in range(duration):
                await asyncio.sleep(1)
                progress = (i + 1) * (100 // duration)
                queue.update_job_progress(job_id, progress, f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ {i+1}/{duration} —à–∞–≥–æ–≤")
                print(f"‚è≥ –ó–∞–¥–∞—á–∞ {job_id}: –ø—Ä–æ–≥—Ä–µ—Å—Å {progress}%")
            
            return {"result": f"–ó–∞–¥–∞—á–∞ {job_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞", "steps": duration}
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É
        job_id = "test_job_001"
        await queue.submit_job(job_id, test_task, 3)
        print(f"üöÄ –ó–∞–¥–∞—á–∞ {job_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å")
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        start_time = time.time()
        while True:
            job_status = queue.get_job_status(job_id)
            if not job_status:
                print("‚ùå –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                break
                
            print(f"üìä –°—Ç–∞—Ç—É—Å: {job_status.status.value}, –ü—Ä–æ–≥—Ä–µ—Å—Å: {job_status.progress}%, –°–æ–æ–±—â–µ–Ω–∏–µ: {job_status.message}")
            
            if job_status.status.value in ['completed', 'failed', 'cancelled']:
                if job_status.status.value == 'completed':
                    print(f"‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ: {job_status.result}")
                else:
                    print(f"‚ùå –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π: {job_status.error}")
                break
            
            # –¢–∞–π–º–∞—É—Ç –Ω–∞ 30 —Å–µ–∫—É–Ω–¥
            if time.time() - start_time > 30:
                print("‚è∞ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É")
                break
                
            await asyncio.sleep(1)
            
        print("‚úÖ –¢–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à—ë–Ω")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_ocr_processing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç OCR –æ–±—Ä–∞–±–æ—Ç–∫—É –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –±–∏–±–ª–∏–æ—Ç–µ–∫–∏."""
    print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OCR/NLP –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å OCR - –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—É—Ç–∏
        import sys
        if str(backend_path) not in sys.path:
            sys.path.insert(0, str(backend_path))
        
        import ocr_nlp  # type: ignore
        OCR_AVAILABLE = ocr_nlp.OCR_AVAILABLE
        TESSERACT_AVAILABLE = ocr_nlp.TESSERACT_AVAILABLE
        
        if not OCR_AVAILABLE:
            print("‚ö†Ô∏è  OCR –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
            return True
            
        if not TESSERACT_AVAILABLE:
            print("‚ö†Ô∏è  Tesseract –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
            return True
            
        print("‚úÖ OCR/NLP –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
        test_file = backend_path / "test_document.txt"
        with open(test_file, "w", encoding="utf-8") as f:
            f.write("–î–û–ì–û–í–û–† ‚Ññ TEST-001 –æ—Ç 14.09.2024\n")
            f.write("–ó–∞–∫–∞–∑—á–∏–∫: –û–û–û –¢–µ—Å—Ç\n")
            f.write("–ü–æ–¥—Ä—è–¥—á–∏–∫: –ò–ü –¢–µ—Å—Ç–æ–≤ –ê.–ê.\n")
            f.write("–°—É–º–º–∞: 100000 —Ä—É–±–ª–µ–π\n")
        
        print(f"üìù –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {test_file}")
        
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        test_file.unlink()
        print("üóëÔ∏è  –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ OCR: {e}")
        return False

def test_nginx_config():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é nginx."""
    print("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ nginx...")
    
    try:
        nginx_config = Path(__file__).parent / "frontend" / "nginx.conf"
        
        if not nginx_config.exists():
            print("‚ùå –§–∞–π–ª nginx.conf –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        with open(nginx_config, "r", encoding="utf-8") as f:
            content = f.read()
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ timeout –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if "proxy_read_timeout 300s" in content:
            print("‚úÖ Timeout –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è API –Ω–∞–π–¥–µ–Ω—ã")
        else:
            print("‚ö†Ô∏è  Timeout –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è API –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
        if "client_max_body_size 50M" in content:
            print("‚úÖ –õ–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        else:
            print("‚ö†Ô∏è  –õ–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è nginx –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ nginx: {e}")
        return False

def test_api_endpoints():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–æ–≤—ã—Ö API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤."""
    print("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—É—Ç–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º sys.modules –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
        import importlib.util
        import sys
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ api.py
        api_file_path = backend_path / "api.py"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å api –Ω–∞–ø—Ä—è–º—É—é
        spec = importlib.util.spec_from_file_location("api", api_file_path)
        if spec is None or spec.loader is None:
            raise ImportError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å api –∏–∑ {api_file_path}")
            
        api_module = importlib.util.module_from_spec(spec)
        sys.modules["api"] = api_module
        spec.loader.exec_module(api_module)
        
        router = api_module.router
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã
        routes = [route.path for route in router.routes]
        
        expected_routes = [
            "/contracts/extract",
            "/jobs/{job_id}/status", 
            "/jobs/{job_id}/cancel"
        ]
        
        for route in expected_routes:
            if route in routes:
                print(f"‚úÖ –ú–∞—Ä—à—Ä—É—Ç {route} –Ω–∞–π–¥–µ–Ω")
            else:
                print(f"‚ùå –ú–∞—Ä—à—Ä—É—Ç {route} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üß™ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ï–®–ï–ù–ò–Ø –ü–†–û–ë–õ–ï–ú–´ GATEWAY TIMEOUT ===\n")
    
    tests = [
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è nginx", test_nginx_config),
        ("API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã", test_api_endpoints),
        ("–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞", test_async_processing),
        ("OCR/NLP –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã", test_ocr_processing),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}")
        print("-" * 50)
        
        if asyncio.iscoroutinefunction(test_func):
            result = await test_func()
        else:
            result = test_func()
            
        results.append((test_name, result))
        
        if result:
            print(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
        else:
            print(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
    
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("=" * 60)
    
    passed = 0
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\n–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed}/{len(results)}")
    
    if passed == len(results):
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ü—Ä–æ–±–ª–µ–º–∞ —Å Gateway Timeout –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ—à–µ–Ω–∞.")
        
        print("\nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Docker containers –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π nginx")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö –¥–æ–≥–æ–≤–æ—Ä–æ–≤")
        print("3. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ª–æ–≥–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤")
        
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞.")
    
    return passed == len(results)

if __name__ == "__main__":
    asyncio.run(main())