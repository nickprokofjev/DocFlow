#!/usr/bin/env python3
"""
Test script for the enhanced contract processing functionality.
Tests OCR/NLP extraction with the sample contract text.
"""

import sys
import os
from typing import Dict, List, Union, Any
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from ocr_nlp import extract_contract_entities, extract_detailed_contract_fields

# Sample contract text from the user's provided document
SAMPLE_CONTRACT_TEXT = """
–î–û–ì–û–í–û–† –ü–û–î–†–Ø–î–ê ‚Ññ03.07/24-–ö
–≥. –°–∞–º–∞—Ä–∞ ¬´03¬ª –∏—é–ª—è 2024 –≥.

–û–±—â–µ—Å—Ç–≤–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é ¬´–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è ¬´–õ–∏–¥–µ—Ä¬ª
(–û–û–û ¬´–°–ö ¬´–õ–∏–¥–µ—Ä¬ª, –ò–ù–ù 6317153913), –∏–º–µ–Ω—É–µ–º–æ–µ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º ¬´–ó–∞–∫–∞–∑—á–∏–∫¬ª, –≤ –ª–∏—Ü–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞
–µ–¥–∏–Ω–æ–ª–∏—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ä–≥–∞–Ω–∞ - —É–ø—Ä–∞–≤–ª—è—é—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –û–û–û ¬´–õ–∏–¥–µ—Ä¬ª (–ò–ù–ù 6316272717)
–í–ª–∞—Å–æ–≤–∞ –ï–≥–æ—Ä–∞ –ï–≤–≥–µ–Ω—å–µ–≤–∏—á–∞, –¥–µ–π—Å—Ç–≤—É—é—â–µ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –£—Å—Ç–∞–≤–∞, —Å –æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã, –∏

–û–±—â–µ—Å—Ç–≤–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é ¬´–ê–¢–õ–ê–ù–¢¬ª (–û–û–û ¬´–ê–¢–õ–ê–ù–¢¬ª), –∏–º–µ–Ω—É–µ–º–æ–µ –≤
–¥–∞–ª—å–Ω–µ–π—à–µ–º ¬´–ü–æ–¥—Ä—è–¥—á–∏–∫¬ª, –≤ –ª–∏—Ü–µ –ì–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –ë–∏–∫–±—É–ª–∞—Ç–æ–≤–∞ –ú–∞—Ä–∞—Ç–∞ –ù–∞–∏–ª—å–µ–≤–∏—á–∞,
–¥–µ–π—Å—Ç–≤—É—é—â–µ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –£—Å—Ç–∞–≤–∞, —Å –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã, –ø—Ä–∏ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ ¬´–°—Ç–æ—Ä–æ–Ω—ã¬ª,
–∑–∞–∫–ª—é—á–∏–ª–∏ –Ω–∞—Å—Ç–æ—è—â–∏–π –¥–æ–≥–æ–≤–æ—Ä –æ –Ω–∏–∂–µ—Å–ª–µ–¥—É—é—â–µ–º:

1. –ü—Ä–µ–¥–º–µ—Ç –¥–æ–≥–æ–≤–æ—Ä–∞

1.1. –ü–æ–¥—Ä—è–¥—á–∏–∫ –æ–±—è–∑—É–µ—Ç—Å—è –ø–æ –∑–∞–¥–∞–Ω–∏—é –ó–∞–∫–∞–∑—á–∏–∫–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–∏–ª–∞–º–∏ –∏ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º
–¥–∞–≤–∞–ª—å—á–µ—Å–∫–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—ã –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É —Ñ–∞—Å–∞–¥–∞ —Å–µ–∫—Ü–∏–∏ ‚Ññ1, ‚Ññ9 (–æ—Ç–¥–µ–ª–∫–∞
—Ñ–∞—Å–∞–¥–∞ - –ª–æ–¥–∂–∏–∏, –Ω–∞—Ä—É–∂–Ω—ã–µ —Å—Ç–µ–Ω—ã) –ø–æ —Å–∏—Å—Ç–µ–º–µ —Ç–∏–ø–∞ –õ–ê–≠–° –ª–∏–±–æ –∞–Ω–∞–ª–æ–≥–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç–µ
—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞: ¬´–°—Ä–µ–¥–Ω–µ—ç—Ç–∞–∂–Ω—ã–π –∂–∏–ª–æ–π –¥–æ–º —Å–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ –Ω–µ–∂–∏–ª—ã–º–∏ –ø–æ–º–µ—â–µ–Ω–∏—è–º–∏ –∏
–ø–æ–¥–∑–µ–º–Ω—ã–º –ø–∞—Ä–∫–∏–Ω–≥–æ–º, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã–π –ø–æ –∞–¥—Ä–µ—Å—É: –≥. –°–∞–º–∞—Ä–∞, –û–∫—Ç—è–±—Ä—å—Å–∫–∏–π —Ä–∞–π–æ–Ω, –ø—Ä–æ—Å–µ–∫–∞
–¢—Ä–µ—Ç—å—è¬ª (—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞ –ñ–ö ¬´–ö—É–ª—å—Ç—É—Ä–∞¬ª (–Ω–∞ –∑–µ–º–µ–ª—å–Ω–æ–º —É—á–∞—Å—Ç–∫–µ —Å –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–º
–Ω–æ–º–µ—Ä–æ–º 63:01:0637003:94, –ø–ª–æ—â–∞–¥—å—é 15 000 –∫–≤.–º., —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ ‚Ññ63-301000-
130-2021 –æ—Ç 29.07.2021–≥.)

4. –¶–µ–Ω–∞ –¥–æ–≥–æ–≤–æ—Ä–∞ –∏ –ø–æ—Ä—è–¥–æ–∫ —Ä–∞—Å—á–µ—Ç–æ–≤

4.1. –¶–µ–Ω–∞ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –î–æ–≥–æ–≤–æ—Ä–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ –°–º–µ—Ç–Ω—ã–º —Ä–∞—Å—á–µ—Ç–æ–º —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 4728 960,00 —Ä—É–±. 
(–ß–µ—Ç—ã—Ä–µ –º–∏–ª–ª–∏–æ–Ω–∞ —Å–µ–º—å—Å–æ—Ç –¥–≤–∞–¥—Ü–∞—Ç—å –≤–æ—Å–µ–º—å —Ç—ã—Å—è—á –¥–µ–≤—è—Ç—å—Å–æ—Ç —à–µ—Å—Ç—å–¥–µ—Å—è—Ç —Ä—É–±–ª–µ–π 00 –∫–æ–ø–µ–µ–∫), 
–≤ —Ç—á. –ù–î–° 20% - 788 160,00 —Ä—É–±.

4.2.2. –°—Ç–æ—Ä–æ–Ω—ã –ø—Ä–∏—à–ª–∏ –∫ —Å–æ–≥–ª–∞—à–µ–Ω–∏—é –æ —Ç–æ–º, —á—Ç–æ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç –ó–∞–∫–∞–∑—á–∏–∫ —É–¥–µ—Ä–∂–∏–≤–∞–µ—Ç
5% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —ç—Ç–∞–ø–∞ —Ä–∞–±–æ—Ç –ü–æ–¥—Ä—è–¥—á–∏–∫–æ–º

10.1. –°—Ä–æ–∫ –≥–∞—Ä–∞–Ω—Ç–∏–∏ –Ω–∞ –≤—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–æ –Ω–∞—Å—Ç–æ—è—â–µ–º—É –¥–æ–≥–æ–≤–æ—Ä—É —Ä–∞–±–æ—Ç—ã, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é —à–µ—Å—Ç–∏–¥–µ—Å—è—Ç–∏ –º–µ—Å—è—Ü–µ–≤ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –ø–æ –ø–µ—Ä–≤–æ–º—É
–∞–∫—Ç—É –ø—Ä–∏–µ–º–∞-–ø–µ—Ä–µ–¥–∞—á–∏ –æ–±—ä–µ–∫—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫—É –¥–æ–ª–µ–≤–æ–≥–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞.

6.2. –í —Å–ª—É—á–∞–µ –Ω–µ—Å–æ–±–ª—é–¥–µ–Ω–∏—è –ü–æ–¥—Ä—è–¥—á–∏–∫–æ–º —Å—Ä–æ–∫–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç –ü–æ–¥—Ä—è–¥—á–∏–∫ –≤—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç –ó–∞–∫–∞–∑—á–∏–∫—É
–ø–µ–Ω–∏ –≤ —Ä–∞–∑–º–µ—Ä–µ:
- 0,1 % –æ—Ç —Ü–µ–Ω—ã –¥–æ–≥–æ–≤–æ—Ä–∞, –∑–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–æ—Å—Ä–æ—á–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö 7 (—Å–µ–º–∏) –¥–Ω–µ–π –ø—Ä–æ—Å—Ä–æ—á–∫–∏;
- 0,2 % –æ—Ç —Ü–µ–Ω—ã –¥–æ–≥–æ–≤–æ—Ä–∞ –∑–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–æ—Å—Ä–æ—á–∫–∏, –Ω–∞—á–∏–Ω–∞—è —Å 8-–≥–æ –¥–Ω—è –ø—Ä–æ—Å—Ä–æ—á–∫–∏

6.4. –ó–∞ –Ω–µ—Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ü–æ–¥—Ä—è–¥—á–∏–∫
—É–ø–ª–∞—á–∏–≤–∞–µ—Ç –ó–∞–∫–∞–∑—á–∏–∫—É —à—Ç—Ä–∞—Ñ–Ω—É—é –Ω–µ—É—Å—Ç–æ–π–∫—É –≤ —Ä–∞–∑–º–µ—Ä–µ 50000 —Ä—É–±. –∑–∞ –∫–∞–∂–¥—ã–π —Ñ–∞–∫—Ç –Ω–∞—Ä—É—à–µ–Ω–∏—è

–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ‚Ññ1 ‚Äî –ü—Ä–æ—Ç–æ–∫–æ–ª —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞;
–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ‚Ññ2 ‚Äî –°–º–µ—Ç–Ω—ã–π —Ä–∞—Å—á—ë—Ç;
–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ‚Ññ3 ‚Äî –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç;
–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ‚Ññ4 - –§–æ—Ä–º–∞ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö;
–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ‚Ññ5 - –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞ –ö–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏ –¢–ï–•–ù–û–ù–ò–ö–û–õ–¨ ¬´–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å–∏—Å—Ç–µ–º
—Ñ–∞—Å–∞–¥–Ω—ã—Ö —Ç–µ–ø–ª–æ–∏–∑–æ–ª—è—Ü–∏–æ–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–∑–∏—Ç–Ω—ã—Ö¬ª.
"""

def test_contract_extraction():
    """Test the contract data extraction functionality."""
    print("üß™ Testing Contract Data Extraction")
    print("=" * 50)
    
    try:
        # Test the detailed field extraction
        print("üìã Extracting detailed contract fields...")
        extracted_data = extract_detailed_contract_fields(SAMPLE_CONTRACT_TEXT)
        
        print("\n‚úÖ Extraction Results:")
        print("-" * 30)
        
        for key, value in extracted_data.items():
            if value:
                print(f"üìå {key}: {value}")
        
        # Expected fields to validate
        expected_fields = {
            'contract_number': '03.07/24-–ö',
            'customer_name': '–û–±—â–µ—Å—Ç–≤–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é ¬´–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è ¬´–õ–∏–¥–µ—Ä¬ª',
            'contractor_name': '–û–±—â–µ—Å—Ç–≤–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é ¬´–ê–¢–õ–ê–ù–¢¬ª',
            'customer_inn': '6317153913',
            'customer_director_name': '–í–ª–∞—Å–æ–≤–∞ –ï–≥–æ—Ä–∞ –ï–≤–≥–µ–Ω—å–µ–≤–∏—á–∞',
            'contractor_director_name': '–ë–∏–∫–±—É–ª–∞—Ç–æ–≤–∞ –ú–∞—Ä–∞—Ç–∞ –ù–∞–∏–ª—å–µ–≤–∏—á–∞',
            'work_object_name': '–°—Ä–µ–¥–Ω–µ—ç—Ç–∞–∂–Ω—ã–π –∂–∏–ª–æ–π –¥–æ–º —Å–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ –Ω–µ–∂–∏–ª—ã–º–∏ –ø–æ–º–µ—â–µ–Ω–∏—è–º–∏ –∏ –ø–æ–¥–∑–µ–º–Ω—ã–º –ø–∞—Ä–∫–∏–Ω–≥–æ–º',
            'cadastral_number': '63:01:0637003:94',
            'construction_permit': '63-301000-130-2021',
            'amount_including_vat': '4728960.00',
            'vat_rate': '20',
            'retention_percentage': '5',
            'warranty_period_months': '60',
        }
        
        print("\nüîç Validation Results:")
        print("-" * 30)
        
        successful_extractions = 0
        total_expected = len(expected_fields)
        
        for field, expected_value in expected_fields.items():
            if field in extracted_data and extracted_data[field]:
                actual_value = str(extracted_data[field]).strip()
                if expected_value.lower() in actual_value.lower() or actual_value.lower() in expected_value.lower():
                    print(f"‚úÖ {field}: SUCCESS")
                    successful_extractions += 1
                else:
                    print(f"‚ö†Ô∏è  {field}: PARTIAL (Expected: {expected_value}, Got: {actual_value})")
                    successful_extractions += 0.5
            else:
                print(f"‚ùå {field}: MISSING")
        
        print(f"\nüìä Success Rate: {successful_extractions}/{total_expected} ({successful_extractions/total_expected*100:.1f}%)")
        
        # Test attachments extraction
        if 'attachments' in extracted_data and extracted_data['attachments'] is not None:
            attachments_list = extracted_data['attachments']
            if isinstance(attachments_list, list):
                print(f"\nüìé Attachments Found: {len(attachments_list)}")
                for i, attachment in enumerate(attachments_list, 1):
                    if isinstance(attachment, dict):
                        title = attachment.get('title', 'Unknown Title')
                        attachment_type = attachment.get('type', 'Unknown Type')
                        print(f"   {i}. {title} (Type: {attachment_type})")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error during extraction: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_nlp_entities():
    """Test the NLP entity extraction."""
    print("\nü§ñ Testing NLP Entity Extraction")
    print("=" * 50)
    
    try:
        entities = extract_contract_entities(SAMPLE_CONTRACT_TEXT)
        
        if isinstance(entities, dict) and 'error' not in entities:
            print("‚úÖ NLP extraction successful!")
            for entity_type, entity_list in entities.items():
                if isinstance(entity_list, list) and entity_list:
                    print(f"üìå {entity_type}: {len(entity_list)} found")
                    for entity in entity_list[:3]:  # Show first 3
                        print(f"   - {entity}")
                elif entity_type not in ['ORG', 'DATE', 'MONEY', 'PERSON']:
                    # Show other extracted fields
                    if entity_list is not None:
                        print(f"üìå {entity_type}: {entity_list}")
        else:
            print(f"‚ùå NLP extraction failed: {entities}")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error during NLP extraction: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Run all tests."""
    print("üöÄ Starting Contract Processing Tests")
    print("=" * 60)
    
    test1_passed = test_contract_extraction()
    test2_passed = test_nlp_entities()
    
    print("\n" + "=" * 60)
    print("üìä FINAL RESULTS")
    print("-" * 20)
    print(f"üìã Contract Field Extraction: {'‚úÖ PASSED' if test1_passed else '‚ùå FAILED'}")
    print(f"ü§ñ NLP Entity Extraction: {'‚úÖ PASSED' if test2_passed else '‚ùå FAILED'}")
    
    if test1_passed and test2_passed:
        print("\nüéâ All tests passed! The enhanced contract processing system is working correctly.")
        print("\nüí° Next Steps:")
        print("   1. Run the backend server: python backend/main.py")
        print("   2. Run the frontend: npm run dev")
        print("   3. Upload the sample contract through the web interface")
        print("   4. Verify the extracted data in the contract details view")
    else:
        print("\n‚ö†Ô∏è  Some tests failed. Please check the implementation.")
        
    return test1_passed and test2_passed

if __name__ == "__main__":
    main()