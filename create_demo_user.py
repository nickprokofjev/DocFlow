#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
–†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É "User not found" –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π.
"""
import os
import sys
import asyncio
import logging
from pathlib import Path

# Add backend directory to path for imports
backend_path = str(Path(__file__).parent / "backend")
if backend_path not in sys.path:
    sys.path.insert(0, backend_path)

# Now import from backend modules
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession, async_sessionmaker
from sqlalchemy import select, text
from models import User, Base
from auth import get_password_hash
from db import DATABASE_URL

logging.basicConfig(level=logging.INFO, format='%(asctime)s [%(levelname)s] %(message)s')
logger = logging.getLogger(__name__)

async def check_database_connection():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    try:
        engine = create_async_engine(DATABASE_URL, echo=False)
        async with engine.begin() as conn:
            result = await conn.execute(text("SELECT 1"))
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")
        await engine.dispose()
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

async def create_tables():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç."""
    try:
        engine = create_async_engine(DATABASE_URL, echo=False)
        async with engine.begin() as conn:
            await conn.run_sync(Base.metadata.create_all)
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã/–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
        await engine.dispose()
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
        return False

async def create_demo_users():
    """–°–æ–∑–¥–∞–µ—Ç –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç."""
    try:
        engine = create_async_engine(DATABASE_URL, echo=False)
        async_session = async_sessionmaker(bind=engine, expire_on_commit=False)
        
        demo_users = [
            {
                "email": "admin@example.com",
                "username": "admin",
                "password": "admin123",
                "is_superuser": True,
                "description": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã"
            },
            {
                "email": "demo@example.com", 
                "username": "demo",
                "password": "demo123",
                "is_superuser": False,
                "description": "–î–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            },
            {
                "email": "user@example.com",
                "username": "user", 
                "password": "user123",
                "is_superuser": False,
                "description": "–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            }
        ]
        
        async with async_session() as session:
            users_created = 0
            
            for user_data in demo_users:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                result = await session.execute(
                    select(User).where(
                        (User.email == user_data["email"]) | 
                        (User.username == user_data["username"])
                    )
                )
                existing_user = result.scalar_one_or_none()
                
                if existing_user:
                    logger.info(f"‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {user_data['email']}")
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                    existing_user.hashed_password = get_password_hash(user_data["password"])
                    users_created += 1
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    hashed_password = get_password_hash(user_data["password"])
                    new_user = User(
                        email=user_data["email"],
                        username=user_data["username"],
                        hashed_password=hashed_password,
                        is_superuser=user_data["is_superuser"],
                        is_active=True
                    )
                    session.add(new_user)
                    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data['email']} ({user_data['description']})")
                    users_created += 1
            
            await session.commit()
            logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_created}")
        
        await engine.dispose()
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return False

async def list_all_users():
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    try:
        engine = create_async_engine(DATABASE_URL, echo=False)
        async_session = async_sessionmaker(bind=engine, expire_on_commit=False)
        
        async with async_session() as session:
            result = await session.execute(select(User))
            users = result.scalars().all()
            
            logger.info(f"üìã –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: {len(users)}")
            for user in users:
                status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if user.is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
                role = "üëë –ê–¥–º–∏–Ω" if user.is_superuser else "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                logger.info(f"  ‚Ä¢ {user.email} (–ª–æ–≥–∏–Ω: {user.username}) - {role} - {status}")
        
        await engine.dispose()
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return False

def print_demo_credentials():
    """–í—ã–≤–æ–¥–∏—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏."""
    print("\n" + "="*60)
    print("üîë –£–ß–ï–¢–ù–´–ï –î–ê–ù–ù–´–ï –î–õ–Ø –í–•–û–î–ê –í –°–ò–°–¢–ï–ú–£:")
    print("="*60)
    print("üëë –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†:")
    print("   Email: admin@example.com")
    print("   Password: admin123")
    print("")
    print("üë§ –î–ï–ú–û-–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨:")
    print("   Email: demo@example.com") 
    print("   Password: demo123")
    print("")
    print("üë§ –û–ë–´–ß–ù–´–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨:")
    print("   Email: user@example.com")
    print("   Password: user123")
    print("="*60)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    print("üöÄ === –ù–ê–°–¢–†–û–ô–ö–ê –î–ï–ú–û-–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô DOCFLOW ===\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    if not await check_database_connection():
        print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        print(f"üîß DATABASE_URL: {DATABASE_URL}")
        return False
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    print("\nüèóÔ∏è  –°–æ–∑–¥–∞–Ω–∏–µ/–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü...")
    if not await create_tables():
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    print("\nüë• –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    if not await create_demo_users():
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return False
    
    # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    print("\nüìã –¢–µ–∫—É—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ —Å–∏—Å—Ç–µ–º–µ:")
    await list_all_users()
    
    # –í—ã–≤–æ–¥–∏–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    print_demo_credentials()
    
    print("\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    print("üí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∏—Å–ø–æ–ª—å–∑—É—è –ª—é–±—ã–µ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
    
    return True

if __name__ == "__main__":
    try:
        success = asyncio.run(main())
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)